# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2020 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


import json
import logging
import requests
from grimoirelab_toolkit.datetime import datetime_to_utc, datetime_utcnow
from grimoirelab_toolkit.uris import urijoin
import bs4
import re


from ...backend import (Backend,
                        BackendCommand,
                        BackendCommandArgumentParser,
                        uuid)
from ...client import HttpClient
from ...errors import BaseError
from ...utils import DEFAULT_DATETIME

CATEGORY_MESSAGE = "comics"

MARVEL_URL = 'https://gateway.marvel.com/v1/public'
MAX_ITEMS = 1000
FLOAT_FORMAT = '{:.6f}'

logger = logging.getLogger(__name__)


class Marvel(Backend):
    """Marvel backend.

    This class retrieves the comics through a Marvel API.
    To access the server an API token is required, which must
    have enough permissions to read from the given channel.

    The origin of the data will be set to the `MARVEL_URL`
     i.e 'https://gateway.marvel.com/v1/public/'.


    :param api_token: token or key needed to use the API
    :param max_items: maximum number of items requested on the same query
    :param tag: label used to mark the data
    :param archive: archive to store/retrieve items
    :param ssl_verify: enable/disable SSL verification
    """
    version = '0.9.0'

    CATEGORIES = [CATEGORY_MESSAGE]

    def __init__(self,tag=None, archive=None, ssl_verify=False):
        origin = urijoin(MARVEL_URL, CATEGORY_MESSAGE,"?ts=1&apikey=")

        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)
        self.client = None
        self.api_token="ts=1&format=comic&apikey=5e0ce6bef48a467420ab10da790957e9&hash=14ad257fd4adf0d881cb9c49d2ca8ada"


    def fetch(self, category=CATEGORY_MESSAGE):
        """Fetch the comics from the channel.

        :param category: the category of items to fetch
        :param from_date: obtain messages sent since this date

        :returns: a generator of messages
        """
        kwargs = {}
        items = super().fetch(category, **kwargs)

        return items

    def fetch_items(self, category, **kwargs):
        """Fetch the messages

        :param category: the category of items to fetch
        :param kwargs: backend arguments

        :returns: a generator of items
        """
        logger.info("Fetching data for '%s'", category)

        hits_raw = self.client.hits()
        # print(hits_raw)
        hits = self.__parse_hits(hits_raw)
        yield hits

        # response=requests.get(URL)
        # data = response.json()
        # logger.info(data)
        # logger.info("Fetch process completed")
        # yield data


    @classmethod
    def has_archiving(cls):
        """Returns whether it supports archiving items on the fetch process.

        :returns: this backend supports items archive
        """
        return True

    @classmethod
    def has_resuming(cls):
        """Returns whether it supports to resume the fetch process.

        :returns: this backend does not support items resuming
        """
        return False

    @staticmethod
    def metadata_id(item):
        """Extracts the identifier from a Marvel item.
        """

        return item['id']

    @staticmethod
    def metadata_updated_on(item):
        """Extracts and coverts the update time from a Marvel item.

        The timestamp is extracted from 'ts' field and converted
        to a UNIX timestamp.

        :param item: item generated by the backend

        :returns: a UNIX timestamp
        """
        return item['fetched_on']

    @staticmethod
    def metadata_category(item):
        """Extracts the category from a marvel item.

        This backend only generates one type of item which is
        'message'.
        """
        return CATEGORY_MESSAGE


    def _init_client(self, from_archive=False):
        """Init client"""

        return MarvelClient(self.api_token, self.archive,
                           from_archive, self.ssl_verify)


    def __parse_hits(self, hit_raw):
        """Parse the hits returned by the Marvel API"""

        # Create the soup and get the desired div
        bs_result = bs4.BeautifulSoup(hit_raw, 'html.parser')
        # print((bs_result.prettify()))
        hit_string = bs_result.find("div", id="id").text
        print(hit_string)
        # Remove commas or dots
        # hit_string = hit_string.replace(',', u'')
        # hit_string = hit_string.replace('.', u'')

        fetched_on = datetime_utcnow().timestamp()
        # id_args = self.keywords[:]
        id_args=[]
        id_args.append(str(fetched_on))

        hits_json = {
            'fetched_on': fetched_on,
            'id': uuid(*id_args),
            'type': 'Comic'
        }

        # if not hit_string:
        #     logger.warning("No hits for %s", self.keywords)
        #     hits_json['hits'] = 0
        #
        #     return hits_json

        str_hits = re.search(r'\d+', hit_string).group(0)
        hits = int(str_hits)
        hits_json['hits'] = hits

        return hits_json


class MarvelClientError(BaseError):
    """Raised when an error occurs using the  Marvel client"""

    message = "%(error)s"


class MarvelClient(HttpClient):
    """Marvel API client.

    Client for fetching information from the Marvel server
    using its REST API.

    :param api_token: key needed to use the API
    :param max_items: maximum number of items per request
    :param archive: an archive to store/read fetched data
    :param from_archive: it tells whether to write/read the archive
    :param ssl_verify: enable/disable SSL verification
    """
    URL = urijoin(MARVEL_URL, CATEGORY_MESSAGE )
    # print("This is the URl",URL)

    def __init__(self, api_token, archive=None, from_archive=False, ssl_verify=True):
        super().__init__(MARVEL_URL, archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)
        self.api_token = api_token

    def hits(self):
        """Fetch information about a list of keywords."""


        # query_str = ' '.join([k for k in keywords])
        # url=urijoin(MARVEL_URL,CATEGORY_MESSAGE)
        query_str = self.api_token

        logger.info("Fetching hits for '%s'", query_str)
        print(self.URL,query_str)
        # Make the request
        req = self.fetch(self.URL,payload=query_str)

        return req.text


class MarvelCommand(BackendCommand):
    """Class to run Marvel backend from the command line."""

    BACKEND = Marvel

    @classmethod
    def setup_cmd_parser(cls):
        """Returns the Marvel argument parser."""

        parser = BackendCommandArgumentParser(cls.BACKEND,
                                              archive=True,
                                              ssl_verify=False)

        return parser
